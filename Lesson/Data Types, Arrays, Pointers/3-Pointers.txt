
Pointers


Every variable is a memory location, which has its address defined.
That address can be accessed using the ampersand (&) operator (also called the address-of operator), which denotes an address in memory.

For example:

#include <iostream>
using namespace std;

int main()
{
    int score = 5;
    cout << &score << endl;

    return 0;
}

!This outputs the memory address, which stores the variable score.

->int fish = 5;

cout << &fish << endl;


A pointer is a variable, with the address of another variable as its value.
In C++, pointers help make certain tasks easier to perform. Other tasks, such as dynamic memory allocation, cannot be performed without using pointers.

All pointers share the same data type - a long hexadecimal number that represents a memory address.


!The only difference between pointers of different data types is the data type of the variable that the pointer points to.

->What is a pointer? A data type that contains an address


A pointer is a variable, and like any other variable, it must be declared before you can work with it.
The asterisk sign is used to declare a pointer (the same asterisk that you use for multiplication), however, in this statement the asterisk is being used to designate a variable as a pointer.
Following are valid pointer declarations:


int *ip;  // pointer to an integer
double *dp;   // pointer to a double
float *fp;  // pointer to a float
char *ch;  // pointer to a character


Just like with variables, we give the pointers a name and define the type, to which the pointer points to.


!The asterisk sign can be placed next to the data type, or the variable name, or in the middle.

->int *ptr;


Using Pointers


Here, we assign the address of a variable to the pointer.

#include <iostream>
using namespace std;

int main()
{
    int score = 5;
    int *scorePtr;
    scorePtr = &score;

    cout << scorePtr << endl;

    return 0;
}

The code above declares a pointer to an integer called scorePtr, and assigns to it the memory location of the score variable using the ampersand (address-of) operator.

!Now, scorePtr's value is the memory location of score.


->int var = 5;
int * ptr = &var;

Pointer Operations


There are two operators for pointers:
Address-of operator (&): returns the memory address of its operand.
Contents-of (or dereference) operator (*): returns the value of the variable located at the address specified by its operand.

For example:

#include <iostream>
using namespace std;

int main()
{
    int var = 50;
    int  *p;
    p = &var;

    cout << var << endl;
    // Outputs 50 (the value of var)

    cout << p << endl;
    // Outputs 0x29fee8 (var's memory location)

    cout << *p << endl;
    /* Outputs 50 (the value of the variable
     stored in the pointer p) */

    return 0;
}


!The asterisk (*) is used in declaring a pointer for the simple purpose of indicating that it is a pointer (The asterisk is part of its type compound specifier). Don't confuse this with the dereference operator, which is used to obtain the value located at the specified address. They are simply two different things represented with the same sign.


->int x = 25;
int * p = &x;
cout << p << endl;


Dereferencing


The dereference operator (*) is basically an alias for the variable the pointer points to.

For example:

int x = 5;
int *p = &x;

x = x + 4;
x = *p + 4;
*p = *p + 4;

All three of the preceding statements are equivalent, and return the same result. We can access the variable by dereferencing the variable's pointer.

!As p is pointing to the variable x, dereferencing the pointer (*p) is representing exactly the same as the variable x.

->int a = 12; int b = 13;
int * pa = &a;
int * pb = &b;
*pa += *pb; // same as a += b;



Static & Dynamic Memory


To be successful as a C++ programmer, it's essential to have a good understanding of how dynamic memory works.
In a C++ program, memory is divided into two parts:
The stack: All of your local variables take up memory from the stack.
The heap: Unused program memory that can be used when the program runs to dynamically allocate the memory.

Many times, you are not aware in advance how much memory you will need to store particular information in a defined variable and the size of required memory can be determined at run time.
You can allocate memory at run time within the heap for the variable of a given type using the new operator, which returns the address of the space allocated.

new int;

!This allocates the memory size necessary for storing an integer on the heap, and returns that address.

->Type in the code that allocates memory for an int variable (use the 'new' keyword):
new int;



Dynamic Memory


The allocated address can be stored in a pointer, which can then be dereferenced to access the variable.
Example:
int *p = new int;
*p = 5;
We have dynamically allocated memory for an integer, and assigned it a value of 5.

!The pointer p is stored in the stack as a local variable, and holds the heap's allocated address as its value. The value of 5 is stored at that address in the heap.

->int * ptr = new int;

For local variables on the stack, managing memory is carried out automatically.
On the heap, it's necessary to manually handle the dynamically allocated memory, and use the delete operator to free up the memory when it's no longer needed.

delete pointer;

This statement releases the memory pointed to by pointer.

For example:

#include <iostream>
using namespace std;

int main()
{
    int *p = new int; // request memory
    *p = 5; // store value

    cout << *p << endl; // use value

    delete p; // free up the memory
    cout << *p << endl; // use value
    return 0;
}

!Forgetting to free up memory that has been allocated with the new keyword will result in memory leaks, because that memory will stay allocated until the program shuts down.

->delete


Dangling Pointers


The delete operator frees up the memory allocated for the variable, but does not delete the pointer itself, as the pointer is stored on the stack.

Pointers that are left pointing to non-existent memory locations are called dangling pointers.
For example

#include <iostream>
using namespace std;

int main()
{
    int *p = new int; // request memory
    *p = 5; // store value

    delete p; // free up the memory
    // now p is a dangling pointer

    p = new int; // reuse for a new address

    return 0;
}


!The NULL pointer is a constant with a value of zero that is defined in several of the standard libraries, including iostream.
It's a good practice to assign NULL to a pointer variable when you declare it, in case you do not have exact address to be assigned. A pointer assigned NULL is called a null pointer. For example: int *ptr = NULL;

->int * ptr = new int;
delete ptr;


Dynamic memory can also be allocated for arrays.
For example:

#include <iostream>
using namespace std;

int main()
{
    int *p = NULL; // Pointer initialized with null
    p = new int[20]; // Request memory
    delete [] p; // Delete array pointed to by p

    return 0;
}

Note the brackets in the syntax.

!Dynamic memory allocation is useful in many situations, such as when your program depends on input. As an example, when your program needs to read an image file, it doesn't know in advance the size of the image file and the memory necessary to store the image.

->new allocates space dynamically on the heap
delete de-allocates memory on the heap


