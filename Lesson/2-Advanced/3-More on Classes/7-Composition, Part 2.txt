Composition


Now, our Person class has a member of type Birthday
class Person {
 public:
  Person(string n, Birthday b)
  : name(n),
    bd(b)
  {
  }
 private:
  string name;
  Birthday bd;
};

!Composition is used for objects that share a has-a relationship, as in "A Person has a Birthday".

->People::People(string x, Birthday bo)
: name(x), dateOfBirth(bo)  {     }


Let's add a printInfo() function to our Person class, that prints the data of the object:

class Person {
 public:
  Person(string n, Birthday b)
  : name(n),
  bd(b)
  {
  }
  void printInfo()
  {
   cout << name << endl;
   bd.printDate();
  }
 private:
  string name;
  Birthday bd;
};

!Notice that we can call the bd member's printDate() function, since it's of type Birthday, which has that function defined.

->void People::printInfo() {
 cout << name << endl;
dateOfBirth.printDate();
}


Now that we've defined our Birthday and Person classes, we can go to our main, create a Birthday object, and then pass it to a Person object.

#include <iostream>
using namespace std;

class Birthday {
    public:
        Birthday(int m, int d, int y)
        : month(m), day(d), year(y)
        {  }
        void printDate()
        {
            cout<<month<<"/"<<day <<"/"<<year<<endl;
        }
    private:
        int month;
        int day;
        int year;
};

class Person {
    public:
        Person(string n, Birthday b)
        : name(n), bd(b)
        {  }
        void printInfo()
        {
            cout << name << endl;
            bd.printDate();
        }
    private:
        string name;
        Birthday bd;
};

int main() {
    Birthday bd(2, 21, 1985);
    Person p("David", bd);
    p.printInfo();
}


We've created a Birthday object for the date of 2/21/1985. Next, we created a Person object and passed the Birthday object to its constructor. Finally, we used the Person object's printInfo() function to print its data.

!In general, composition serves to keep each individual class relatively simple, straightforward, and focused on performing one task. It also enables each sub-object to be self-contained, allowing for reusability (we can use the Birthday class within various other classes).

->Birthday birthObj(10,30,1989);
People john("john",birthObj);