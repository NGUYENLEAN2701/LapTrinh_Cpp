Chức năng bạn bè - Friend Functions

Thông thường, các thành viên riêng của một lớp không thể được truy cập từ bên ngoài lớp đó.
Tuy nhiên, khai báo một hàm không phải thành viên là bạn của một lớp cho phép nó truy cập vào các thành viên riêng của lớp. Điều này được thực hiện bằng cách bao gồm một khai báo của hàm bên ngoài này trong lớp và đặt trước nó bằng từ khóa friend .
Trong ví dụ dưới đây, someFunc () , không phải là một hàm thành viên của lớp, là một người bạn của MyClass và có thể truy cập các thành viên riêng tư của nó.

class MyClass {
 public:
  MyClass() {
   regVar = 0;
  }
 private:
  int regVar;
    
  friend void someFunc(MyClass &obj);
};


!Note that when passing an object to the function, we need to pass it by reference, using the & operator.


->Type in the keyword for making a function a friend function for a class.
friend


The function someFunc() is defined as a regular function outside the class. It takes an object of type MyClass as its parameter, and is able to access the private data members of that object.

class MyClass {
 public:
  MyClass() {
   regVar = 0;
  }
 private:
  int regVar;
    
 friend void someFunc(MyClass &obj);
};

void someFunc(MyClass &obj) {
  obj.regVar = 42;
  cout << obj.regVar;
}


The someFunc() function changes the private member of the object and prints its value.

!To make its members accessible, the class has to declare the function as a friend in its definition. You cannot "make" a function a friend to a class without the class "giving away" its friendship to that function.

->class MyClass {
public:
 friend void foo();
};


Now we can create an object in main and call the someFunc() function:

#include <iostream>
using namespace std;

class MyClass {
    public:
        MyClass() {
            regVar = 0;
        }
    private:
        int regVar;

    friend void someFunc(MyClass &obj);
};

void someFunc(MyClass &obj) {
    obj.regVar = 42;
    cout << obj.regVar;
}

int main() {
    MyClass obj;
    someFunc(obj);
}

someFunc() had the ability to modify the private member of the object and print its value.

Typical use cases of friend functions are operations that are conducted between two different classes accessing private members of both.


!You can declare a function friend across any number of classes.
Similar to friend functions, you can define a friend class, which has access to the private members of another class.


A friend function... can modify all members of a class, including private members