Function Templates


Function templates also make it possible to work with multiple generic data types. Define the data types using a comma-separated list.
Let's create a function that compares arguments of varying data types (an int and a double), and prints the smaller one.

template <class T, class U>

!As you can see, this template declares two different generic data types, T and U.

->template <class T,class U>


Now we can continue with our function declaration:


template <class T, class U>
T smaller(T a, U b) {
  return (a < b ? a : b);
}

!The ternary operator checks the a<b condition and returns the corresponding result. The expression (a < b ? a : b) is equivalent to the expression if a is smaller than b, return a, else, return b.

->template <class F,class S>
F smaller(F a, S b){  
return (a < b ? a : b); 
}

Full code: 

#include <iostream>
using namespace std;

template <class T, class U>
T smaller(T a, U b) {
    return (a < b ? a : b);
}

int main () {
    int x=72;
    double y=15.34;
    cout << smaller(x, y) << endl;
    return 0;
}
!The output converts to an integer, because we specified the function template's return type to be of the same type as the first parameter (T), which is an integer.

->int main(){
  int a= 12;
  double b = 23.7;
  cout << smaller(a, b) << endl;
}


T is short for Type, and is a widely used name for type parameters.
It's not necessary to use T, however; you can declare your type parameters using any identifiers that work for you. The only terms you need to avoid are C++ keywords.

!Remember that when you declare a template parameter, you absolutely must use it in your function definition. Otherwise, the compiler will complain!


->Which statement about templates is true?
Templates allow us to declare generic types of data

