Class Templates

Just as we can define function templates, we can also define class templates, allowing classes to have members that use template parameters as types.
The same syntax is used to define the class template:

template <class T>
class MyClass {

};

!Just as with function templates, you can define more than one generic data type by using a comma-separated list.


->template <class T>
class MyClass { 
 };

As an example, let's create a class Pair, that will be holding a pair of values of a generic type.

template <class T>
class Pair {
 private:
  T first, second;
 public:
  Pair (T a, T b):
   first(a), second(b) {
  }
};

!The code above declares a class template Pair, with two private variables of a generic type, and one constructor to initialize the variables.

->template <class T>
class MyClass{
    T memOne;
    T memTwo;
    public:
    MyClass(T a, T b){
        memOne = a;
        memTwo = b;
    }
}

A specific syntax is required in case you define your member functions outside of your class - for example in a separate source file.
You need to specify the generic type in angle brackets after the class name.
For example, to have a member function bigger() defined outside of the class, the following syntax is used:

template <class T>
class Pair {
 private:
  T first, second;
 public:
  Pair (T a, T b):
   first(a), second(b){
  }
  T bigger();
};

template <class T>
T Pair<T>::bigger() {
  â€‹}


!A specific syntax is required in case you define your member functions outside of your class.

->template <class T>
void MyClass<T>::hello(){
cout << "Hi" << endl;
}


The bigger function returns the greater value of the two member variables.

template <class T>
class Pair {
 private:
  T first, second;
 public:
  Pair (T a, T b):
   first(a), second(b){
  }
  T bigger();
};

template <class T>
T Pair<T>::bigger() {
  return (first>second ? first : second);
}

The ternary operator compares the two variables, returning the greater one.

->template <class T>
T MyClass<T>::bigger(){
 return (first > secondm? first : second);
}

To create objects of the template class for different types, specify the data type in angle brackets, as we did when defining the function outside of the class.
Here, we create a Pair object for integers.

#include <iostream>
using namespace std;

template <class T>
class Pair {
    private:
        T first, second;
    public:
        Pair (T a, T b):
        first(a), second(b) { }
        T bigger();
};

template <class T>
T Pair<T>::bigger() {
    return (first>second ? first : second);
}

int main()
{
    Pair <int> obj(11, 22);
    cout << obj.bigger();

    return 0;
}


->MyClass<int> obj;