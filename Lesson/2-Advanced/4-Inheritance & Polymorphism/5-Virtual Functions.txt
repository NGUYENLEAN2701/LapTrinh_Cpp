Virtual Functions

The previous example demonstrates the use of base class pointers to the derived classes. Why is that useful? Continuing on with our game example, we want every Enemy to have an attack() function.
To be able to call the corresponding attack() function for each of the derived classes using Enemy pointers, we need to declare the base class function as virtual.
Defining a virtual function in the base class, with a corresponding version in a derived class, allows polymorphism to use Enemy pointers to call the derived classes' functions.
Every derived class will override the attack() function and have a separate implementation:

class Enemy {
 public:
  virtual void attack() {
  }
};
class Ninja: public Enemy {
 public:
  void attack() {
   cout << "Ninja!"<<endl;
  }
};
class Monster: public Enemy {
 public:
  void attack() {
   cout << "Monster!"<<endl;
 }
};

!A virtual function is a base class function that is declared using the keyword virtual.

->class Enemy {
public:
 virtual void attack() {
     cout << "enemy attacks"; 
 }
};

Now, we can use Enemy pointers to call the attack() function.
#include <iostream>
using namespace std;
class Enemy {
    public:
        virtual void attack() { }
};
class Ninja: public Enemy {
    public:
        void attack() {
            cout << "Ninja!"<<endl;
  }
};
class Monster: public Enemy {
    public:
        void attack() {
            cout << "Monster!"<<endl;
        }
};
int main() {
    Ninja n;
    Monster m;
    Enemy *e1 = &n;
    Enemy *e2 = &m;

    e1->attack();
    e2->attack();
}

!As the attack() function is declared virtual, it works like a template, telling that the derived class might have an attack() function of its own.

->class Enemy {
public:
virtual void attack() { 
  cout << "Enemy attacks"; }
};
class Ninja : public Enemy {
public:
 void attack() {
   cout << "Ninja attacks"; }
};

Our game example serves to demonstrate the concept of polymorphism; we are using Enemy pointers to call the same attack() function, and generating different results.

e1->attack();
e2->attack();

If a function in the base class is virtual, the function's implementation in the derived class is called according to the actual type of the object referred to, regardless of the declared type of the pointer.

!A class that declares or inherits a virtual function is called a polymorphic class.


A class is called polymorphic if ... it has a virtual function